*Read this in other languages: [Russian](readme.ru.md)*

# File generation requirements
## Saving dependencies

python -m pip freeze > requirements.txt

## Running dependencies from a file

pip install -r requirements.txt

# Creating tables 

CREATE TABLE
  IF NOT EXISTS tasks (
    id_task INTEGER PRIMARY KEY AUTOINCREMENT,
    datetime_task datetime default CURRENT_TIMESTAMP,
    title_task TEXT NOT NULL,
    content TEXT NOT NULL,
    status_task BOOLEAN
  )

CREATE TABLE
  IF NOT EXISTS posts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    content TEXT NOT NULL
  )
  
create table sandbox
(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    content  text
);  


CREATE TABLE
  IF NOT EXISTS git_and_bash (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    command TEXT NOT NULL,
    name TEXT NOT NULL
  )
  

# Creating routes
Creating routesTo create a page, a link to it is written in the base or navbar template
Here is an example of a link:

<a class="nav-link" href="{{ url_for('sql') }}"> SQL </a>

In the application script itself, in our git case app.py, we prescribe the route to the page.

@app.route('/sql')
def sql():
    return render_template('sql.html')

Where the 1st line is the route itself, the 2nd line is the function declaration and the 3rd line is the page output from the templates.

The page itself can be simply copied from index.html to change the content.

{% extends "base.html" %}
{% block title %}Home Page{% endblock %}
{% block content %}
<p>Главная</p>
{% endblock %}

# Uploading pictures
HTML page.

<title>Python Flask File Upload Example</title>
<h2>Select a file to upload</h4>
<p>
	{% with messages = get_flashed_messages() %}
	  {% if messages %}
		<ul class=flashes>
		{% for message in messages %}
		  <li>{{ message }}</li>
		{% endfor %}
		</ul>
	  {% endif %}
	{% endwith %}
</p>
<form method="post" action="/" enctype="multipart/form-data">
    <dl>
		<p>
			<input type="file" name="file" autocomplete="off" required>
		</p>
    </dl>
    <p>
		<input type="submit" value="Submit">
	</p>
</form>

App logic.
The most important thing is to correctly specify the folder where the files will be saved

UPLOAD_FOLDER = 'static'
# расширения файлов, которые разрешено загружать
ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'}

app = Flask(__name__)
# конфигурируем
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
bootstrap = Bootstrap5()
app.secret_key = "secret key"

@app.route('/upload_images')
def upload_images():
    return render_template("upload_images.html")

@app.route('/', methods=['POST'])
def upload_file():
    if request.method == 'POST':
        # check if the post request has the file part
        if 'file' not in request.files:
            flash('No file part')
            return redirect(request.url)
        file = request.files['file']
        if file.filename == '':
            flash('No file selected for uploading')
            return redirect(request.url)
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            flash('File successfully uploaded')
            return redirect('/')
        else:
            flash('Allowed file types are txt, pdf, png, jpg, jpeg, gif, py, docx')
            return redirect(request.url)


## The app opens in the default browser

venv/scripts/python.exe -m webbrowser http://127.0.0.1:82


python -m pip install --upgrade -r requirements.txt

python -m  pip freeze > requirements.txt

python -m pip uninstall -r requirements.txt -y

python -m pip install --user pipx

pip install --upgrade -r requirements.txt

python -m pip install threading


